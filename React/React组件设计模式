https://mp.weixin.qq.com/s/1LJj00h7cspibXNuQ-ZggA

软件设计中有一个原则，叫做“责任分离”（Separation of Responsibility），即让一个模块的责任尽量少，
如果发现一个模块功能过多，就应该拆分为多个模块，让一个模块都专注于一个功能，这样更利于代码的维护。
容器展示组件这个模式所解决的问题在于，当我们切换数据获取方式时，只需在容器组件修改相应逻辑即可，
展示组件无需做改动。比如现在我们获取数据源是通过普通的 fetch 请求，那么将来改成 redux 或者 mobx 作为数据源，
我们只需聚焦到容器组件去修改相应逻辑即可，展示组件可完全不变，展示组件有了更高的可复用性。
但该模式的缺点也在于将一个组件分成了两部分，增加了代码跳转的成本。并不是说组件包含从外部获取数据，就要将其拆成容器组件与展示组件。拆分带来的好处和劣势需要你自己去权衡。想对这种模式深入了解，可以详见这篇文章：

Presentational and Container Components（http://t.cn/RqMyfwV）.
